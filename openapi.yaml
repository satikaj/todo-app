openapi: 3.0.3
info:
  title: Todo App
  description: |-
    This is a todo application back-end that follows the REST API standard and OpenAPI 3.0 specification and provides full functionality for managing tasks.
  contact:
    email: satikajayawardena@proton.me
  version: 1.0.0
externalDocs:
  description: The Todo App repository
  url: https://github.com/satikaj/RESTful-app
servers:
  - url: http://localhost:3000
tags:
  - name: todo
    description: Manage todo items
  - name: user
    description: Manage user account
paths:
  /todo:
    get:
      tags:
        - todo
      summary: Get all todos
      description: Get all todos of the current user
      operationId: getAllTodos
      responses:
        '200':
          description: Successfully found all todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoResponse'
    post:
      tags:
        - todo
      summary: Add a new todo item
      description: Add a new todo item
      operationId: addTodo
      requestBody:
        $ref: '#/components/requestBodies/Todo'
      responses:
        '201':
          description: Successfully created todo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '400':
          description: Invalid input for todo
  /todo/{id}:
    get:
      tags:
        - todo
      summary: Find todo by ID
      description: Returns the todo item of the specified id
      operationId: getTodoById
      parameters:
        - name: id
          in: path
          description: ID of todo to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Found todo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '404':
          description: Todo of given ID does not exist
    put:
      tags:
        - todo
      summary: Update an existing todo item
      description: Update an existing todo item by ID
      operationId: updateTodo
      parameters:
        - name: id
          in: path
          description: ID of todo to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Todo'
      responses:
        '200':
          description: Successfully updated todo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '404':
          description: Todo of given ID does not exist
    delete:
      tags:
        - todo
      summary: Delete a todo item
      description: Delete a todo item by ID
      operationId: deleteTodo
      parameters:
        - name: id
          in: path
          description: ID of todo to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successfully deleted todo
        '404':
          description: Todo of given ID does not exist
  /todo/{id}/complete:
    patch:
      tags:
        - todo
      summary: Complete todo
      description: Complete todo by ID
      operationId: completeTodo
      parameters:
        - name: id
          in: path
          description: ID of todo to complete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successfully completed todo
        '404':
          description: Todo of given ID does not exist
  /user/register:
    post:
      tags:
        - user
      summary: Create user
      description: Register a user account
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '201':
          description: Successfully created user account
  /user/login:
    get:
      tags:
        - user
      summary: Login user
      description: Logs user into the system
      operationId: loginUser
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '404':
          description: Account with the given email and password does not exist
  /user/logout:
    get:
      tags:
        - user
      summary: Log out user
      description: Logs out the currently logged in user
      operationId: logoutUser
      responses:
        '200':
          description: Successfully logged out user
  /user/{email}:
    put:
      tags:
        - user
      summary: Update account email
      description: Update the email linked to the currently logged in account
      operationId: updateUser
      parameters:
        - name: email
          in: path
          description: The email to be updated
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully updated account email
  /user/delete:
    delete:
      tags:
        - user
      summary: Delete user
      description: Delete the currently logged in user account
      operationId: deleteUser
      responses:
        '204':
          description: Successfully deleted user account
components:
  schemas:
    TodoRequest:
      required:
        - title
      type: object
      properties:
        title:
          type: string
          example: Walk the dog
        notes:
          type: string
          example: Go for a walk at the creek before sunrise
        dueDate:
          type: string
          format: date
          example: 2023-01-03
        priority:
          type: string
          enum:
            - high
            - medium
            - low
        category:
          type: string
          example: Personal
    TodoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: Walk the dog
        notes:
          type: string
          example: Go for a walk at the creek before sunrise
        dueDate:
          type: string
          format: date
          example: 2023-01-03
        priority:
          type: string
          enum:
            - high
            - medium
            - low
        category:
          type: string
          example: Personal
        isCompleted:
          type: boolean
          example: false
    User:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    AuthResponse:
      type: object
      properties:
        token:
          type: string
  requestBodies:
    Todo:
      required: true
      description: Todo item details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TodoRequest'
        application/xml:
          schema:
            $ref: '#/components/schemas/TodoRequest'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/TodoRequest'
    User:
      required: true
      description: User account details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        application/xml:
          schema:
            $ref: '#/components/schemas/User'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/User'
  securitySchemes:
    TodoAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - TodoAuth: []