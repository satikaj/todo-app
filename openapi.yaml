openapi: 3.0.3
info:
  title: Todo App
  description: RESTful todo application to manage tasks.
  version: 1.0.0
tags:
  - name: todo
    description: Manage todo items
  - name: user
    description: Manage user account
paths:
  /todo:
    post:
      tags:
        - todo
      summary: Add a new todo item
      description: Add a new todo item
      operationId: addTodo
      requestBody:
        $ref: '#/components/requestBodies/Todo'
      responses:
        '200':
          $ref: '#/components/responses/Todo200'
        '405':
          description: Invalid input
  /todo/{id}:
    get:
      tags:
        - todo
      summary: Find todo by ID
      description: Returns the todo item of the same id
      operationId: getTodoById
      parameters:
        - name: id
          in: path
          description: ID of todo to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: '#/components/responses/Todo200'
        '400':
          description: Invalid ID supplied
        '404':
          description: Todo not found
    put:
      tags:
        - todo
      summary: Update an existing todo item
      description: Update an existing todo item by id
      operationId: updateTodo
      parameters:
        - name: id
          in: path
          description: ID of todo to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Todo'
      responses:
        '200':
          $ref: '#/components/responses/Todo200'
        '400':
          description: Invalid ID supplied
        '404':
          description: Todo not found
        '405':
          description: Validation exception
    delete:
      tags:
        - todo
      summary: Deletes a todo item
      description: Delete a todo item
      operationId: deleteTodo
      parameters:
        - name: id
          in: path
          description: Todo id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid todo value
  /todo/{id}/complete:
    patch:
      tags:
        - todo
      summary: Complete todo
      description: Complete todo
      operationId: completeTodo
      parameters:
        - name: id
          in: path
          description: ID of todo to complete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Todo not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The email for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid email/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: successful operation
  /user/{email}:
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: email
          in: path
          description: The email that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: email
          in: path
          description: The email that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid email supplied
        '404':
          description: User not found
components:
  schemas:
    TodoRequest:
      required:
        - title
      type: object
      properties:
        title:
          type: string
          example: Walk the dog
        notes:
          type: string
          example: Go for a walk at the creek before sunrise
        dueDate:
          type: string
          format: date
          example: 2023-01-03
        priority:
          type: string
          enum:
            - high
            - medium
            - low
        category:
          type: string
          example: Personal
    TodoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: Walk the dog
        notes:
          type: string
          example: Go for a walk at the creek before sunrise
        dueDate:
          type: string
          format: date
          example: 2023-01-03
        priority:
          type: string
          enum:
            - high
            - medium
            - low
        category:
          type: string
          example: Personal
        isCompleted:
          type: boolean
          example: false
    User:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
      xml:
        name: user
  requestBodies:
    Todo:
      description: Todo item details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TodoRequest'
        application/xml:
          schema:
            $ref: '#/components/schemas/TodoRequest'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/TodoRequest'
      required: true
    User:
      description: User account details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        application/xml:
          schema:
            $ref: '#/components/schemas/User'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/User'
  responses:
    Todo200:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TodoResponse'          
        application/xml:
          schema:
            $ref: '#/components/schemas/TodoResponse'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
security:
  - BasicAuth: []